=======================
Versions 1.0+ Changelog
=======================

These are all the changelogs for stable releases of hikari-miru (version 1.0.0 to present).

----

Version 1.2.0
=============

- Added support for modals via ``miru.Modal``.

- Added support for text input fields via ``miru.TextInput``.

- Added ``RawComponentContext``, ``RawModalContext``, ``ViewContext``, and ``ModalContext`` that inherit from ``Context``.

- Added ``miru.InteractionResponse``.

- ``Context.respond()`` and ``Context.edit_response()`` now return an ``InteractionResponse`` object.

- Added ``Context.bot`` and ``Context.author`` as aliases for ``Context.app`` and ``Context.user`` respectively.

- Added overloads to ``Context.defer()`` to allow use of different deffered response-types.

- Added ``miru.abc.ViewItem`` and ``miru.abc.ModalItem`` that inherit from ``miru.abc.Item``.

- Views now expect items of type ``ViewItem`` and provide ``ViewContext``.

- ``Button`` and ``Select`` are now subclasses of ``ViewItem``.

- Added ``miru.abc.ItemHandler``. ``View`` and ``Modal`` are subclasses of this object.

- Added ``miru.abc.ItemHandler.last_context`` to access the last received context & interaction by the item handler.

- ``miru.abc.ItemHandler`` now implements ``Sequence[hikari.api.ActionRowBuilder]``, and thus can be treated as a sequence of action rows. This means that calling ``.build()`` on item handlers is no longer required.

- Renamed ``miru.Interaction`` to ``miru.ComponentInteraction``.

- Added ``miru.ModalInteraction``.

- Added ``View.from_message()`` classmethod to allow creation of views from message components.

- Added ``View.wait_for_input()`` to wait for any component interaction relating to the view.

- Added ``timeout`` parameter to ``ItemHandler.wait()``.

- Added ``View.get_context()`` and ``Modal.get_context()`` for custom context support.

- Added two new event types ``ModalInteractionCreateEvent`` and ``ComponentInteractionCreateEvent``.

- These listeners include the corresponding raw context with the event object, along with every field from ``hikari.InteractionCreateEvent``.

- ``ItemHandler.add_item()``, ``ItemHandler.remove_item()``, and ``ItemHandler.clear_items()`` now return the ``ItemHandler`` object to allow for method chaining.

- Added ``responded`` kwarg to ``NavigatorView`` to have the ability to send navigators on acknowledged interactions.

- Added ``start_at`` kwarg to ``NavigatorView`` to define what the first page should be.

- Added a "Jump to page" modal to built-in ``ext.nav.IndicatorButton`` when pressed.

- Fixed selectoption ``is_default`` fields being ignored.

Version 1.1.1
=============

- Remove debug prints from ``NavigatorView.send()``

Version 1.1.0
=============

- Add ``miru.unload()`` to unload miru and remove the application reference.

- Add ``miru.get_view()`` to get a currently running view by message snowflakeish.

- Add ``ephemeral`` kwarg to ``NavigatorView`` for ephemeral support.

- Annotate ``miru.button()`` and ``miru.select()`` to return their respective objects.

- No longer use explicit submodules unless they are exported in context type signatures.

- Allow message objects in ``miru.View.start_listener()``.

- Make colorama an optional Windows-only dependency.

- Fix a bug where URL buttons would fail to initialize. (`#17 <https://github.com/HyperGH/hikari-miru/issues/17>`_)

- Fix a bug where ``miru.Context.edit_response()`` would not work correctly after initial response.

Thanks to `sadru <https://github.com/thesadru>`_ for help with this release.

Version 1.0.0
=============

- Remove ``app`` parameter from ``View``.

- Add ``miru.load()`` to load miru and pass ``app``. This replaces passing ``app`` to view, and should be called once on startup.

- Add ``Context`` and switch all item methods to use it in favour of ``Interaction``.

- Moved all short-hand methods from ``Interaction`` to ``Context``, renaming some of them. Please check the API reference for both.

- ``Interaction`` is now practically identical to ``hikari.ComponentInteraction`` with no added methods.

- Added documentation to the project

- Views are now assigned to messages, and if a new view is assigned to a message that already has one, the old one will be automatically stopped. This does not apply to unbound persistent views.